#!/bin/bash

MINER_DIR="/opt/miner"
PROG="bin/miner"
FULL_PROG=${MINER_DIR}/${PROG}
LOG="/var/log/miner/startup.log"
USER_SWARM_KEY="/var/lib/user_swarm_key"
MINER_SWARM_KEY="/var/lib/miner/miner/swarm_key"
SYS_CONF_MAINNET_PATTERN="${MINER_DIR}/releases/*/sys.config"
SYS_CONF_TESTNET_PATTERN="${MINER_DIR}/releases/*/testnet-sys.config"
USER_CONF="/data/etc/miner_sys.config"
MINER_CONF="/data/etc/miner.conf"
HARDWARE_CONF="/var/run/hardware.conf"
HELIUM_API_CONF="/var/run/helium-api.conf"

WATCH_PROG_INTERVAL=10
NETWORK_TIMEOUT=3600
MIN_FREE_SPACE=1024 # MB
MIN_FREE_SPACE_LEEWAY=512 # MB
SOFT_RESTART_FILE="/var/run/miner_soft_restart"
AUTH_TOKEN="3F4ECC8F2C95134BCA7281C83B879"


test -n "${OS_VERSION}" || source /etc/init.d/base

test -s ${MINER_CONF} && source ${MINER_CONF}

source ${HARDWARE_CONF}

source ${HELIUM_API_CONF}
HELIUM_API_BASE_URL=${BASE_URL}


free_space() {
    df -m /data | tail -n1 | tr -s ' ' | cut -d ' ' -f 4
}

watch_prog() {
    # During normal running, we add an extra leeway when checking for free space,
    # to make sure the free space check at next reboot will force a disk cleanup.
    min_free_space_watch=$((${MIN_FREE_SPACE} - ${MIN_FREE_SPACE_LEEWAY})) # MB
    while true; do
        sleep ${WATCH_PROG_INTERVAL}

        # Don't check miner liveness while soft-restarting
        test -f ${SOFT_RESTART_FILE} && continue
        
        if ! ps aux | grep ${FULL_PROG} | grep -vq grep; then
            panic_action miner "service dead" && break
        fi
        free_mb=$(free_space)
        if [[ "${free_mb}" -lt ${min_free_space_watch} ]]; then
            panic_action miner "low disk space: ${free_mb} MB" && break
        fi
    done
}

start() {
    # If we don't have enough storage space, remove miner data and start with clean data dir
    free_mb=$(free_space)
    if [[ "${free_mb}" -lt ${MIN_FREE_SPACE} ]]; then
        msg_begin "Removing miner data due to low space"
        rm -rf /var/lib/miner
        msg_done "${free_mb} MB"
    fi
    
    msg_begin "Starting miner"

    i2c_dev=/dev/i2c-${I2C_BUS}
    if ! [[ -e ${i2c_dev} ]] && ! [[ -s ${USER_SWARM_KEY} ]]; then
        msg_fail "no I2C device ${i2c_dev}"
        return
    fi

    if ! [[ -s /var/run/vpnpasswd ]]; then
        msg_fail "no provisioned ECC device"
        panic_action miner "no provisioned ECC device"
        return 1
    fi

    cd ${MINER_DIR}
    mkdir -p $(dirname ${LOG})
    
    export RUNNER_LOG_DIR="/var/log/miner"
    export ERL_CRASH_DUMP="/var/log/miner"
    export ERL_FULLSWEEP_AFTER=5
    export HOME=/var/run
    export RELX_CONFIG_PATH="/var/run/miner_sys.config"
    test -n "${REGION_OVERRIDE}" && export ${REGION_OVERRIDE}
    ulimit -n 32768
    
    # Determine miner version & helium network
    miner_version=$(basename $(ls -d ${MINER_DIR}/releases/*/))
    if [[ "${miner_version}" == testnet_* ]]; then
        helium_network=testnet
    else
        helium_network=mainnet
    fi
    
    # Use custom config, if present
    if [[ -s ${USER_CONF} ]]; then
        cp ${USER_CONF} ${RELX_CONFIG_PATH}
    else
        if [[ "${helium_network}" == mainnet ]]; then
            SYS_CONF=$(ls -1 ${SYS_CONF_MAINNET_PATTERN} | head -n 1)  # Just use the first occurrence
        else
            SYS_CONF=$(ls -1 ${SYS_CONF_TESTNET_PATTERN} | head -n 1)  # Just use the first occurrence
        fi
        cp ${SYS_CONF} ${RELX_CONFIG_PATH}
        
        # Adjust dirs
        sed -ri 's;base_dir, ".*";base_dir, "/var/lib/miner";' ${RELX_CONFIG_PATH}
        sed -ri 's;onboarding_dir, ".*";onboarding_dir, "/boot";' ${RELX_CONFIG_PATH}
        sed -ri 's;update_dir, ".*";update_dir, "/var/run/miner_update";' ${RELX_CONFIG_PATH}
        
        # Copy genesis block
        mkdir -p /var/run/miner_update
        cp ${MINER_DIR}/update/genesis.${helium_network} /var/run/miner_update/genesis

        # Adjust API base URL
        sed -ri "s;https://api.helium.io/v1;${HELIUM_API_BASE_URL};" ${RELX_CONFIG_PATH}

        if [[ -s ${USER_SWARM_KEY} ]]; then
            # If user swarm key is present, configure miner to use it instead of ECC
            sed -ri 's/(.*key_slot.*)/%%\1/' ${RELX_CONFIG_PATH}

            # Copy user swarm key to miner swarm key location
            mkdir -p $(dirname ${MINER_SWARM_KEY})
            cp ${USER_SWARM_KEY} ${MINER_SWARM_KEY}
        else
            # Configure ECC params
            sed -ri "s/key_slot, [[:digit:]]+/key_slot, ${ECC_SLOT}/g" ${RELX_CONFIG_PATH}
            sed -ri "s/onboarding_key_slot, [[:digit:]]+/onboarding_key_slot, ${ECC_ONBOARDING_SLOT}/g" ${RELX_CONFIG_PATH}
            sed -ri "s/address, 16#[[:digit:]]+/address, 16#${ECC_ADDRESS:2}/" ${RELX_CONFIG_PATH}
            sed -ri "s/i2c-1/i2c-${I2C_BUS}/g" ${RELX_CONFIG_PATH}
        fi
    fi

    # We need the public key information for gateway config & more
    public_keys=$(${PROG} print_keys)
    if [[ $? != 0 ]]; then
        msg_fail "failed to print public key"
        panic_action miner "failed to print public key"
        return 1
    fi    
    echo $public_keys > /var/run/public_keys
    
    # Start the miner
    nice -n 10 ${PROG} foreground &>> ${LOG} &
    
    rm -f ${SOFT_RESTART_FILE}

    # Start the watchers
    if [[ "$1" != soft ]]; then
        watch_prog &
        disown
    fi

    test -s ${USER_SWARM_KEY} && msg_done "with user swarm key" || msg_done "with ECC"

    # Wait for a network connection
    msg_begin "Waiting for network connection"
    connmand-wait-online --timeout=${NETWORK_TIMEOUT}
    if [[ $? != 0 ]]; then
        msg_fail "no network connection"
        panic_action miner "no network connection"
        return 1
    fi
    msg_done "connected"
}

stop() {
    msg_begin "Stopping miner"
    
    base_prog=$(basename ${PROG})
    # Allow for a few seconds of graceful shutdown
    for ((i = 0; i < 20; i++)); do
        if ! killall -q ${base_prog}; then
            break
        fi
        sleep 1
    done
    
    killall -q -9 ${base_prog}

    if [[ "$1" != soft ]]; then
        # Kill any remainings with SIGKILL
        ps | grep miner | grep -v $$ | grep -v grep | tr -s ' ' | sed -e 's/^\s//' | cut -d ' ' -f 1 | xargs -r kill -9 2>/dev/null
    fi

    msg_done
}

restart() {
    stop
    start
}

soft_restart() {
    touch ${SOFT_RESTART_FILE}
    stop soft &>/dev/null
    start soft &>/dev/null
}

case "$1" in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
        restart
        ;;

    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit $?
