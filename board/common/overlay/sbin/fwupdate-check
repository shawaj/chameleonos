#!/bin/bash

source /etc/init.d/base

#BASE_URL="https://fwd-%s.syncrob.it"  # Use if service can't do region redirection
BASE_URL="https://fwd.syncrob.it"
REG_CONF="/var/lib/reg.conf"
MIN_UPTIME=1800
#ACTIVE_CHECK_ENDPOINT_URL="https://api-%s.syncrob.it/activecheck/"  # Use if service can't do region redirection
ACTIVE_CHECK_ENDPOINT_URL="https://api.syncrob.it/activecheck/"
#PENDING_UNITS_ENDPOINT_URL="https://api-%s.syncrob.it/pendingunits/"  # Use if service can't do region redirection
PENDING_UNITS_ENDPOINT_URL="https://api.syncrob.it/unitspending/"
AUTH_TOKEN="3F4ECC8F2C95134BCA7281C83B879"

test -s ${REG_CONF} && source ${REG_CONF}
BASE_URL=$(printf "${BASE_URL}" "${REGION_PREFIX}")
ACTIVE_CHECK_ENDPOINT_URL=$(printf "${ACTIVE_CHECK_ENDPOINT_URL}" "${REGION_PREFIX}")
PENDING_UNITS_ENDPOINT_URL=$(printf "${PENDING_UNITS_ENDPOINT_URL}" "${REGION_PREFIX}")

cmdline_args="$*"

function arg_present() {
    for arg in ${cmdline_args}; do
        if [ "${arg}" == "$1" ]; then
            return 0
        fi
    done

    return 1
}

function get_latest_info() {
    if [[ "${OS_PRERELEASES}" == "true" ]]; then
        latest_file="latest.json"
    else
        latest_file="latest_stable.json"
    fi

    latest_url="${BASE_URL}/${OS_PREFIX}/${latest_file}"
    latest=$(curl --fail -sSL ${latest_url})
    latest=$(jq -r '.path,.version,.date' <<<"${latest}")
    latest=(${latest})
    latest_path=${latest[0]}
    latest_version=${latest[1]}
    firmware_url="${BASE_URL}${latest_path}"

    if [[ -z "${latest_version}" ]]; then
        echo "Error getting the latest version"
        exit 1
    fi
}


echo "---- $(date) ----"

if arg_present "--info"; then
    get_latest_info
    echo "Current: ${OS_VERSION}"
    echo "Latest: ${latest_version}"
    echo "URL: ${firmware_url}"
    if [[ "${OS_PRERELEASES}" == "true" ]]; then
        echo "Beta: true"
    else
        echo "Beta: false"
    fi
    exit 0
fi

if [[ "${OS_DEBUG}" == "true" ]] && ! arg_present "--force"; then
    echo "Skipping firmware update check in debug mode"
    exit
fi

if ps aux | grep '{fwupdate}' | grep -vq grep && ! arg_present "--force"; then
    echo "Firmware update process is already running"
    exit
fi

address=$(cat /var/run/public_keys | grep -oE '[0-9a-zA-Z]{50,}' | head -n 1)
output=$(
    curl --silent --show-error --location-trusted "${ACTIVE_CHECK_ENDPOINT_URL}" \
         -H "Content-Type: application/json" \
         -H "Authorization: ${AUTH_TOKEN}" \
         -X POST -d "{\"rpi_sn\": \"${BOARD_SN}\", \"miner_address\": \"${address}\"}"
)

if grep -q "Not found" <<< "${output}"; then
    echo "Skipping firmware update check for inactive unit"
    if [[ -s /var/run/public_keys ]] && [[ -s /var/run/ecc_sn ]] && [[ -s /var/run/public_key_hex ]]; then
        /etc/init.d/S87pubkeyinfo start &>/dev/null
        animal_name=$(cut -d '"' -f 6 < /var/run/public_keys)
        miner_address=$(cut -d '"' -f 2 < /var/run/public_keys)
        ecc_sn=$(cat /var/run/ecc_sn)
        pub_key_hex=$(cat /var/run/public_key_hex)
        hostname=$(hostname)
        test -s /sys/class/net/eth0/address && eth_mac=$(cat /sys/class/net/eth0/address) || eth_mac=""
        test -s /sys/class/net/wlan0/address && wlan_mac=$(cat /sys/class/net/wlan0/address) || wlan_mac=""
        curl --silent --show-error --location-trusted --fail "${PENDING_UNITS_ENDPOINT_URL}" \
             -H "Content-Type: application/json" \
             -H "Authorization: ${AUTH_TOKEN}" \
             -X POST -d "{\"rpi_sn\": \"${BOARD_SN}\", \"onboard_address\": \"${miner_address}\", \"ecc_sn\": \"${ecc_sn}\", \"pub_key\": \"${pub_key_hex}\", \"eth_mac\": \"${eth_mac}\", \"wlan_mac\": \"${wlan_mac}\", \"sb_sn\": \"${hostname}\", \"miner_name\": \"${animal_name}\"}" > /dev/null
        if [[ $? == 0 ]]; then
            echo "Pushed pending unit details"
        else
            echo "Failed to push pending unit details"
        fi
    fi
    exit
fi

uptime_seconds=$(cat /proc/uptime | grep -oE '^[[:digit:]]+')
if [[ ${uptime_seconds} -lt ${MIN_UPTIME} ]] && ! arg_present "--force"; then
    echo "Skipping firmware update check immediately after boot"
    exit
fi

get_latest_info

if [[ "${OS_VERSION}" == "${latest_version}" ]]; then
    echo "Already running latest version (${latest_version})"
    exit 0
fi

panic_inhibit
echo "Updating from ${OS_VERSION} to ${latest_version} using ${firmware_url}"
fwupdate upgrade "${firmware_url}"
