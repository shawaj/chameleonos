#!/usr/bin/env python

import asyncio
import hashlib
import logging
import os

from typing import Awaitable, Callable

from aiohttp import web


PORT = 2319
PUB_KEY_FILE = '/var/run/public_key_hex'
SEND_LOGS_ACTIVE = '/var/run/send_logs_active'

router = web.RouteTableDef()


def read_pub_key() -> str:
    with open(PUB_KEY_FILE, 'rt') as f:
        return f.read().strip()


def read_rpi_sn() -> str:
    with open('/proc/cpuinfo', 'rt') as f:
        for line in f:
            if line.startswith('Serial'):
                return line.strip()[-8:]

    raise RuntimeError('Could not read CPU serial number')


def get_auth_hash() -> str:
    to_hash = f'{read_rpi_sn()}:{read_pub_key()}'
    return hashlib.sha256(to_hash.encode()).hexdigest()


def handle_auth(
    func: Callable[[web.Request], Awaitable[web.Response]]
) -> Callable[[web.Request], Awaitable[web.Response]]:
    async def handler(request: web.Request) -> web.Response:
        try:
            auth = request.headers['Authorization']

        except KeyError:
            return web.json_response({'error': 'unauthorized'}, status=401)

        auth = auth.lower()
        if auth != get_auth_hash():
            return web.json_response({'error': 'unauthorized'}, status=401)

        return await func(request)

    return handler


def do_reboot() -> None:
    logging.info('reboot request received')
    os.system('/sbin/reboot')


@router.post('/reboot')
@handle_auth
async def reboot(request: web.Request) -> web.Response:
    loop = asyncio.get_event_loop()
    loop.call_later(2, do_reboot)

    return web.json_response({'message': 'ok'})


@router.post('/logs/start')
@handle_auth
async def logs_start(request: web.Request) -> web.Response:
    with open(SEND_LOGS_ACTIVE, 'w'):
        pass

    return web.json_response({'message': 'ok'})


@router.post('/logs/stop')
@handle_auth
async def logs_stop(request: web.Request) -> web.Response:
    try:
        os.remove(SEND_LOGS_ACTIVE)

    except IOError:
        pass

    return web.json_response({'message': 'ok'})


def make_app() -> web.Application:
    app = web.Application()
    app.add_routes(router)

    return app


if __name__ == '__main__':
    logging.basicConfig(
        format='%(asctime)s [%(levelname)s]: %(message)s',
        level=logging.INFO,
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    logging.info('hello!')

    app = make_app()
    web.run_app(app, port=PORT, print=lambda *args: None)
