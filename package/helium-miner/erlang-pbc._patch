diff -uNr erlang-pbc/c_src/cmake/ASan.cmake erlang-pbc-patched/c_src/cmake/ASan.cmake
--- erlang-pbc/c_src/cmake/ASan.cmake	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/c_src/cmake/ASan.cmake	2021-01-25 23:25:35.533645185 +0200
@@ -0,0 +1,8 @@
+# This file provides a custom build type, `CMAKE_BUILD_TYPE_ASAN`
+
+set(CMAKE_C_FLAGS_ASAN "${CMAKE_C_FLAGS_RELWITHDEBINFO} -fsanitize=address -fno-omit-frame-pointer -fno-common" CACHE STRING "" FORCE)
+set(CMAKE_CXX_FLAGS_ASAN "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -fsanitize=address -fno-omit-frame-pointer -fno-common" CACHE STRING "" FORCE)
+set(CMAKE_EXE_LINKER_FLAGS_ASAN "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -fsanitize=address" CACHE STRING "" FORCE)
+set(CMAKE_SHARED_LINKER_FLAGS_ASAN "${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} -fsanitize=address" CACHE STRING "" FORCE)
+
+set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo" "ASan")
diff -uNr erlang-pbc/c_src/cmake/FindErlang.cmake erlang-pbc-patched/c_src/cmake/FindErlang.cmake
--- erlang-pbc/c_src/cmake/FindErlang.cmake	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/c_src/cmake/FindErlang.cmake	2021-01-25 23:25:35.533645185 +0200
@@ -0,0 +1,76 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+FindErlang
+-------
+
+Finds Erlang libraries.
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module provides the following imported targets, if found:
+
+``Erlang::Erlang``
+  Header only interface library suitible for compiling NIFs.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``Erlang_FOUND``
+  True if the system has the Erlang library.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+The following cache variables may also be set:
+
+``Erlang_ERTS_INCLUDE_DIR``
+  Path to Erlang Runtime System headers.
+
+#]=======================================================================]
+include(FindPackageHandleStandardArgs)
+
+if(DEFINED ENV{ERTS_INCLUDE_DIR})
+  SET(Erlang_ERTS_INCLUDE_DIR $ENV{ERTS_INCLUDE_DIR})
+else()
+  SET(Erlang_BIN_PATH
+    $ENV{ERLANG_HOME}/bin
+    /opt/bin
+    /sw/bin
+    /usr/bin
+    /usr/local/bin
+    /opt/local/bin
+    )
+
+  EXECUTE_PROCESS(
+    COMMAND         erl -noshell -eval "io:format(\"~s\", [code:root_dir()])" -s erlang halt
+    OUTPUT_VARIABLE Erlang_OTP_ROOT_DIR
+    )
+
+  EXECUTE_PROCESS(
+    COMMAND         erl -noshell -eval "io:format(\"~s\",[filename:basename(code:lib_dir('erts'))])" -s erlang halt
+    OUTPUT_VARIABLE Erlang_ERTS_DIR
+    )
+
+  SET(Erlang_ERTS_INCLUDE_DIR ${Erlang_OTP_ROOT_DIR}/${Erlang_ERTS_DIR}/include)
+endif()
+
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(
+  Erlang
+  DEFAULT_MSG
+  Erlang_ERTS_INCLUDE_DIR
+  )
+
+if(Erlang_FOUND)
+  if(NOT TARGET Erlang::Erlang)
+    add_library(Erlang::Erlang INTERFACE IMPORTED)
+    set_target_properties(Erlang::Erlang
+      PROPERTIES
+      INTERFACE_INCLUDE_DIRECTORIES ${Erlang_ERTS_INCLUDE_DIR}
+      )
+  endif()
+endif(Erlang_FOUND)
diff -uNr erlang-pbc/c_src/cmake/FindGMP.cmake erlang-pbc-patched/c_src/cmake/FindGMP.cmake
--- erlang-pbc/c_src/cmake/FindGMP.cmake	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/c_src/cmake/FindGMP.cmake	2021-01-25 23:26:53.333642181 +0200
@@ -0,0 +1,76 @@
+#[=======================================================================[.rst:
+FindGMP
+-------
+
+Find the GNU MULTI-Precision Bignum (GMP) library.
+
+This module is derived from [1]. It is modified to remove the GMPxx
+requirement.
+
+[1]: https://github.com/dune-project/dune-common/blob/b3ee0b735d1818d34fff16aed57656ab707df628/cmake/modules/FindGMP.cmake
+
+Imported Targets
+^^^^^^^^^^^^^^^^
+
+This module provides the following imported targets, if found:
+
+``GMP::gmp``
+  Library target of the C library.
+
+Result Variables
+^^^^^^^^^^^^^^^^
+
+This will define the following variables:
+
+``GMP_FOUND``
+  True if the GMP library and header were found.
+
+Cache Variables
+^^^^^^^^^^^^^^^
+
+You may set the following variables to modify the behaviour of
+this module:
+
+``GMP_INCLUDE_DIR``
+  The directory containing ``gmp.h``.
+``GMP_LIB``
+  The path to the gmp library.
+
+#]=======================================================================]
+
+# Add a feature summary for this package
+include(FeatureSummary)
+set_package_properties(GMP PROPERTIES
+  DESCRIPTION "GNU multi-precision library"
+  URL "https://gmplib.org"
+  )
+
+# Try finding the package with pkg-config
+find_package(PkgConfig QUIET)
+pkg_check_modules(PKG QUIET gmp gmpxx)
+
+# Try to locate the libraries and their headers, using pkg-config hints
+set(GMP_INCLUDE_DIR $ENV{STAGING_DIR}/usr/include)
+set(GMP_LIB $ENV{STAGING_DIR}/usr/lib/libgmp.so)
+
+# Remove these variables from cache inspector
+mark_as_advanced(GMP_INCLUDE_DIR GMP_LIB)
+
+# Report if package was found
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(GMP
+  DEFAULT_MSG
+  GMP_INCLUDE_DIR GMP_LIB
+  )
+
+# Set targets
+if(GMP_FOUND)
+  # C library
+  if(NOT TARGET GMP::gmp)
+    add_library(GMP::gmp UNKNOWN IMPORTED)
+    set_target_properties(GMP::gmp PROPERTIES
+      IMPORTED_LOCATION ${GMP_LIB}
+      INTERFACE_INCLUDE_DIRECTORIES ${GMP_INCLUDE_DIR}
+      )
+  endif()
+endif()
diff -uNr erlang-pbc/c_src/cmake/FindPBC.cmake erlang-pbc-patched/c_src/cmake/FindPBC.cmake
--- erlang-pbc/c_src/cmake/FindPBC.cmake	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/c_src/cmake/FindPBC.cmake	2021-01-25 23:26:15.326975566 +0200
@@ -0,0 +1,49 @@
+include(FindPackageHandleStandardArgs)
+include(ExternalProject)
+
+# get an uppercase version of the build type, for extracting build_type specific flags
+if(CMAKE_BUILD_TYPE)
+  string(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_TYPE_UC)
+endif()
+
+ExternalProject_Add(pbc
+  PREFIX            ${CMAKE_CURRENT_BINARY_DIR}/external-pbc
+  GIT_REPOSITORY    https://github.com/Vagabond/pbc
+  GIT_TAG           cbe5718309e2c34345a35eb76731fb81122f0d79
+  UPDATE_COMMAND    ""
+  BUILD_IN_SOURCE   1
+  CONFIGURE_COMMAND autoreconf --install > /dev/null 2>&1 || autoreconf &&
+                    ./configure
+                    --prefix=${CMAKE_CURRENT_BINARY_DIR}
+                    --host=arm
+                    --with-pic
+                    --disable-shared
+                    --enable-optimized
+                    --enable-safe-clean
+                    $ENV{CONFIGURE_ARGS}
+                    CC=${CMAKE_C_COMPILER}
+                    CFLAGS=${CMAKE_C_FLAGS_${BUILD_TYPE_UC}}
+                    CPPFLAGS=-I${GMP_INCLUDE_DIR}
+                    LDFLAGS=-L${CMAKE_CURRENT_BINARY_DIR}/lib
+  BUILD_COMMAND     make -j
+  BUILD_BYPRODUCTS  ${CMAKE_CURRENT_BINARY_DIR}/lib/libpbc.a
+  INSTALL_COMMAND   make install
+  )
+
+# Hack to let us declare a not-yet-existing include path below.
+file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/include/pbc)
+
+add_library(PBC::PBC STATIC IMPORTED)
+target_include_directories(PBC::PBC
+  INTERFACE
+  ${CMAKE_CURRENT_BINARY_DIR}/include
+  )
+set_target_properties(PBC::PBC
+  PROPERTIES
+  IMPORTED_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/lib/libpbc.a
+  )
+target_link_libraries(PBC::PBC
+  INTERFACE
+  GMP::gmp
+  )
+add_dependencies(PBC::PBC pbc)
diff -uNr erlang-pbc/c_src/CMakeLists.txt erlang-pbc-patched/c_src/CMakeLists.txt
--- erlang-pbc/c_src/CMakeLists.txt	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/c_src/CMakeLists.txt	2021-01-25 23:25:35.533645185 +0200
@@ -0,0 +1,103 @@
+##########################################################################
+# Project Setup                                                          #
+##########################################################################
+cmake_minimum_required(VERSION 3.3)
+project(ErlangPBC C)
+set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
+set(CMAKE_C_STANDARD 99)
+
+list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_SOURCE_DIR}/cmake)
+include(ASan)
+
+IF (APPLE)
+  set(CMAKE_MODULE_LINKER_FLAGS "-flat_namespace -undefined suppress")
+  set(CMAKE_MACOSX_RPATH 1)
+ENDIF()
+
+#
+# Enable sanitization if environment variable is set
+#
+# Truth Table
+#
+# +----------------------+---------------------+------------------+
+# | SANITIZE_ERLANG_NIFS | SANITIZE_ERLANG_PBC | Enable santizer? |
+# +----------------------+---------------------+------------------+
+# | undefined            | undefined           |                0 |
+# | 1                    | undefined           |                1 |
+# | don't care           | 1                   |                1 |
+# | don't care           | 0                   |                0 |
+# +----------------------+---------------------+------------------+
+#
+if(DEFINED ENV{SANITIZE_ERLANG_PBC})
+  if($ENV{SANITIZE_ERLANG_PBC})
+    set(CMAKE_BUILD_TYPE ASan CACHE STRING "Choose the type of build." FORCE)
+  else()
+    unset(CMAKE_BUILD_TYPE CACHE)
+  endif()
+elseif(DEFINED ENV{SANITIZE_ERLANG_NIFS})
+  if($ENV{SANITIZE_ERLANG_NIFS})
+    set(CMAKE_BUILD_TYPE ASan CACHE STRING "Choose the type of build." FORCE)
+  else()
+    unset(CMAKE_BUILD_TYPE CACHE)
+  endif($ENV{SANITIZE_ERLANG_NIFS})
+endif()
+
+#
+# Set a default build type if none was specified
+#
+set(default_build_type "Release")
+
+if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
+  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
+  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
+endif()
+
+
+##########################################################################
+# Static Analysis                                                        #
+##########################################################################
+if(CMAKE_VERSION VERSION_GREATER 3.9)
+  find_program(CPPCHECK
+    NAMES cppcheck
+    DOC   "Path to cppcheck executable"
+    )
+  if(CPPCHECK)
+    message(STATUS "Found cppcheck: ${CPPCHECK}")
+    set(CMAKE_C_CPPCHECK ${CPPCHECK}
+      --enable=all
+      --inline-suppr
+      --inconclusive
+      --quiet
+      --std=c${CMAKE_C_STANDARD}
+      --suppress=missingInclude
+      --template=gcc
+      )
+  endif(CPPCHECK)
+endif()
+
+if(CMAKE_VERSION VERSION_GREATER 3.5)
+  find_program(CLANG_TIDY
+    NAMES clang-tidy
+    DOC   "Path to clang-tidy executable"
+    )
+  if(CLANG_TIDY)
+    message(STATUS "Found clang-tidy: ${CLANG_TIDY}")
+    set(CMAKE_C_CLANG_TIDY "${CLANG_TIDY}")
+  endif(CLANG_TIDY)
+endif()
+
+
+##########################################################################
+# NIF                                                                    #
+##########################################################################
+find_package(Erlang REQUIRED)
+find_package(GMP REQUIRED)
+find_package(PBC REQUIRED)
+add_library(erlang_pbc MODULE erlang_pbc.c)
+target_link_libraries(erlang_pbc
+  PRIVATE
+  Erlang::Erlang
+  PBC::PBC
+  )
+
+install(TARGETS erlang_pbc DESTINATION ${CMAKE_SOURCE_DIR}/../priv)
diff -uNr erlang-pbc/c_src/compile.sh erlang-pbc-patched/c_src/compile.sh
--- erlang-pbc/c_src/compile.sh	2021-01-25 23:25:01.883650197 +0200
+++ erlang-pbc-patched/c_src/compile.sh	1970-01-01 02:00:00.000000000 +0200
@@ -1,23 +0,0 @@
-#!/bin/sh
-
-if [ ! -d c_src/pbc ]; then
-    git clone https://github.com/Vagabond/pbc c_src/pbc
-fi
-
-cd c_src/pbc
-
-if [ ! -d build ]; then
-    mkdir build
-fi
-
-if [ ! -f configure ]; then
-    autoreconf -ivf
-fi
-
-if [ ! -f Makefile ]; then
-    ./configure --prefix=$PWD/build --enable-optimized --enable-safe-clean $CONFIGURE_ARGS
-    sed -i '/^CFLAGS/ s/$/ -fPIC/' Makefile
-fi
-
-make -j
-make install
diff -uNr erlang-pbc/c_src/Makefile erlang-pbc-patched/c_src/Makefile
--- erlang-pbc/c_src/Makefile	2021-01-25 23:25:01.883650197 +0200
+++ erlang-pbc-patched/c_src/Makefile	1970-01-01 02:00:00.000000000 +0200
@@ -1,104 +0,0 @@
-# Based on c_src.mk from erlang.mk by Loic Hoguin <essen@ninenines.eu>
-
-CURDIR := $(shell pwd)
-BASEDIR := $(abspath $(CURDIR)/..)
-
-PROJECT ?= $(notdir $(BASEDIR))
-PROJECT := $(strip $(PROJECT))
-
-ERTS_INCLUDE_DIR ?= $(shell erl -noshell -s init stop -eval "io:format(\"~ts/erts-~ts/include/\", [code:root_dir(), erlang:system_info(version)]).")
-ERL_INTERFACE_INCLUDE_DIR ?= $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, include)]).")
-ERL_INTERFACE_LIB_DIR ?= $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, lib)]).")
-ERL_BEAM_SMP ?= $(shell erl -noshell -s init stop -eval "io:format(\"~ts/beam.smp\", [os:getenv(\"BINDIR\")]).")
-
-C_SRC_DIR = $(CURDIR)
-C_SRC_OUTPUT ?= $(CURDIR)/../priv/$(PROJECT).so
-
-# System type and C compiler/flags.
-LDLIBS += -L $(ERL_INTERFACE_LIB_DIR) -lerl_interface -lei -lgmp
-
-UNAME_SYS := $(shell uname -s)
-ifeq ($(UNAME_SYS), Darwin)
-	CC ?= cc
-	CPPFLAGS ?= -I/usr/local/opt/openssl/include
-	CFLAGS ?= -O3 -std=c99 -arch x86_64 -finline-functions -Wall -Wmissing-prototypes
-	CXXFLAGS ?= -O3 -arch x86_64 -finline-functions -Wall
-	LDFLAGS ?= -arch x86_64
-	LDFLAGS += -bundle -bundle_loader $(ERL_BEAM_SMP) -L/usr/local/opt/openssl/lib
-	LDLIBS += pbc/build/lib/libpbc.a
-else ifeq ($(UNAME_SYS), FreeBSD)
-	CC ?= cc
-	CFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes
-	CXXFLAGS ?= -O3 -finline-functions -Wall
-	LDFLAGS += -shared
-	LDLIBS += -Lpbc/build/lib -Wl,-Bstatic -lpbc -Wl,-Bdynamic
-else ifeq ($(UNAME_SYS), Linux)
-	CC ?= gcc
-	CFLAGS ?= -O0 -g3 -ggdb -std=c99 -finline-functions -Wall -Wmissing-prototypes
-	CXXFLAGS ?= -O0 -g3 -ggdb -finline-functions -Wall
-	LDFLAGS += -shared
-	LDLIBS += -Lpbc/build/lib -Wl,-Bstatic -lpbc -Wl,-Bdynamic
-endif
-
-CFLAGS += -fPIC -I$(ERTS_INCLUDE_DIR) -I$(ERL_INTERFACE_INCLUDE_DIR) -Wextra -Ipbc/build/include
-CXXFLAGS += -fPIC -I$(ERTS_INCLUDE_DIR) -I$(ERL_INTERFACE_INCLUDE_DIR)  -Wextra
-
-
-# Verbosity.
-
-c_verbose_0 = @echo " C     " $(?F);
-c_verbose = $(c_verbose_$(V))
-
-cpp_verbose_0 = @echo " CPP   " $(?F);
-cpp_verbose = $(cpp_verbose_$(V))
-
-link_verbose_0 = @echo " LD    " $(@F);
-link_verbose = $(link_verbose_$(V))
-
-SOURCES := erlang_pbc.c
-OBJECTS = $(addsuffix .o, $(basename $(SOURCES)))
-
-COMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c
-COMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c
-
-$(C_SRC_OUTPUT): $(OBJECTS)
-	@mkdir -p $(BASEDIR)/priv/
-	$(link_verbose) $(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $(C_SRC_OUTPUT)
-
-%.o: %.c
-	$(COMPILE_C) $(OUTPUT_OPTION) $<
-
-%.o: %.cc
-	$(COMPILE_CPP) $(OUTPUT_OPTION) $<
-
-%.o: %.C
-	$(COMPILE_CPP) $(OUTPUT_OPTION) $<
-
-%.o: %.cpp
-	$(COMPILE_CPP) $(OUTPUT_OPTION) $<
-
-clean:
-	@rm -f $(C_SRC_OUTPUT) $(OBJECTS)
-
-%.compdb_entry: %.c
-	@echo "    {" > $@
-	@echo "        \"command\": \"cc  $(CFLAGS) $(CPPFLAGS) -c $<\","   >> $@
-	@echo "        \"directory\": \"$(CURDIR)\","               >> $@
-	@echo "        \"file\": \"$<\""                    >> $@
-	@echo "    },"                              >> $@
-
-COMPDB_ENTRIES = $(addsuffix .compdb_entry, $(basename $(SOURCES)))
-
-compile_commands.json: $(COMPDB_ENTRIES)
-	@echo "[" > $@.tmp
-	@cat $^ >> $@.tmp
-	@sed '$$d' < $@.tmp > $@
-	@echo "    }" >> $@
-	@echo "]" >> $@
-	@rm $@.tmp
-
-clang-tidy: compile_commands.json
-	run-clang-tidy.py
-
-cppcheck: compile_commands.json
-	cppcheck --enable=all --inconclusive --std=c99 -I$(ERTS_INCLUDE_DIR) -I$(ERL_INTERFACE_INCLUDE_DIR) --project=$(CURDIR)/compile_commands.json --template=gcc --check-config -v -DHAVE_CONFIG=0
diff -uNr erlang-pbc/README.md erlang-pbc-patched/README.md
--- erlang-pbc/README.md	1970-01-01 02:00:00.000000000 +0200
+++ erlang-pbc-patched/README.md	2021-01-25 23:25:35.533645185 +0200
@@ -0,0 +1,17 @@
+# erlang-pbc
+
+![CI](https://github.com/helium/erlang-pbc/workflows/CI/badge.svg)
+
+Building
+--------
+
+Fork the repo and simply use `make` to build the library. You will
+need `cmake` installed to build the NIFs.
+
+To run the tests run `make test`.
+
+## Cross compilation
+
+Cross-compilation requires the environment variable `ERTS_INCLUDE_DIR`
+defined as the target directory containing `erl_nif.h`,
+e.g. `ERTS_INCLUDE_DIR=target/usr/lib/erlang/erts-<VERSION>/include`.
diff -uNr erlang-pbc/rebar.config erlang-pbc-patched/rebar.config
--- erlang-pbc/rebar.config	2021-01-25 23:25:01.883650197 +0200
+++ erlang-pbc-patched/rebar.config	2021-01-25 23:25:35.536978518 +0200
@@ -3,12 +3,11 @@
 {cover_export_enabled, true}.
 
 {pre_hooks,
-  [{compile, "./c_src/compile.sh"},
-  {"(linux|darwin|solaris)", compile, "make -C c_src"},
-   {"(freebsd)", compile, "gmake -C c_src"}]}.
+  [{compile, "cmake -B_build/c_src -Hc_src"},
+   {compile, "cmake --build _build/c_src -- install"}]}.
+
 {post_hooks,
-  [{"(linux|darwin|solaris)", clean, "make -C c_src clean"},
-   {"(freebsd)", clean, "gmake -C c_src clean"}]}.
+  [{clean, "cmake --build _build/c_src -- clean"}]}.
 
 {xref_checks,[undefined_function_calls,undefined_functions,locals_not_used,
     deprecated_function_calls, deprecated_functions]}.
diff -uNr erlang-pbc/src/erlang_pbc.erl erlang-pbc-patched/src/erlang_pbc.erl
--- erlang-pbc/src/erlang_pbc.erl	2021-01-25 23:25:01.883650197 +0200
+++ erlang-pbc-patched/src/erlang_pbc.erl	2021-01-25 23:25:35.550311850 +0200
@@ -8,7 +8,7 @@
 -export_type([element/0, group/0]).
 
 -define(APPNAME, erlang_pbc).
--define(LIBNAME, erlang_pbc).
+-define(LIBNAME, liberlang_pbc).
 
 -define(SS512,
 <<"type a
